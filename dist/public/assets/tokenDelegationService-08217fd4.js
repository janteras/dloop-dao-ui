import{c as f,d as u,D as m,z as w}from"./index-e1be7c10.js";import{a as h}from"./contracts-3445139a.js";/**
 * @license lucide-react v0.453.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const b=f("ArrowRight",[["path",{d:"M5 12h14",key:"1ays0h"}],["path",{d:"m12 5 7 7-7 7",key:"xquz4c"}]]),x={async delegateTokens(c,t,r){try{const o=await c.getAddress();if(!t||t==="0x0000000000000000000000000000000000000000")throw new Error("Cannot delegate to null address");if(t.toLowerCase()===o.toLowerCase())throw new Error("Cannot delegate to yourself");const s=window.location.hostname==="localhost";console.log("Connection info:",{isDevelopmentMode:s,walletAddress:o,delegatee:t});const g=["function delegateTokens(address delegatee, uint256 amount) external","function balanceOf(address account) external view returns (uint256)"],n=new u("0x05B366778566e93abfB8e4A9B794e4ad006446b4",g,c),l=m(r);try{const e=await n.balanceOf(o),a=BigInt(e.toString()),i=BigInt(l.toString());if(s)console.log("Development mode - Simulating balance check (assuming enough balance)");else if(a<i)throw new Error(`Insufficient balance for delegation. You have ${w(e)} DLOOP but tried to delegate ${r} DLOOP`)}catch(e){if(console.error("Error checking balance:",e),s)console.log("Development mode - Proceeding despite balance check error");else throw e}if(console.log("Delegation parameters:",{delegator:o,delegatee:t,amountInWei:l.toString()}),s){console.log("Development mode - Simulating delegation transaction");const e={to:"0x05B366778566e93abfB8e4A9B794e4ad006446b4",from:o,contractAddress:null,transactionIndex:0,gasUsed:BigInt(2e5),logsBloom:"0x",blockHash:"0x"+"1".repeat(64),transactionHash:"0x"+"2".repeat(64),logs:[],blockNumber:1,confirmations:1,cumulativeGasUsed:BigInt(3e5),effectiveGasPrice:BigInt(2e9),type:2,status:1};return await new Promise(a=>setTimeout(a,1e3)),console.log("Development mode - Delegation simulated successfully"),e}try{const e=await n.delegateTokens.estimateGas(t,l);console.log("Estimated gas:",e.toString());const a=BigInt(Math.floor(Number(e)*1.2)),d=await(await n.delegateTokens(t,l,{gasLimit:a})).wait();return console.log("Delegation successful:",d),d}catch(e){if(console.error("Gas estimation failed, trying with manual gas limit:",e),s)return console.log("Development mode - Proceeding despite transaction error"),{to:"0x05B366778566e93abfB8e4A9B794e4ad006446b4",from:o,contractAddress:null,transactionIndex:0,gasUsed:BigInt(2e5),logsBloom:"0x",blockHash:"0x"+"1".repeat(64),transactionHash:"0x"+"2".repeat(64),logs:[],blockNumber:1,confirmations:1,cumulativeGasUsed:BigInt(3e5),effectiveGasPrice:BigInt(2e9),type:2,status:1};const i=await(await n.delegateTokens(t,l,{gasLimit:3e5})).wait();return console.log("Delegation successful with manual gas:",i),i}}catch(o){throw console.error("Error delegating tokens:",o),o}},async undelegateTokens(c,t,r){try{const o=await c.getAddress();if(!t||t==="0x0000000000000000000000000000000000000000")throw new Error("Cannot undelegate from null address");const s=window.location.hostname==="localhost";console.log("Undelegation info:",{isDevelopmentMode:s,walletAddress:o,delegatee:t,amount:r});const g=["function withdrawDelegation(address delegatee, uint256 amount) external","function getDelegationTo(address delegator, address delegatee) external view returns (uint256)"],n=new u("0x05B366778566e93abfB8e4A9B794e4ad006446b4",g,c),l=m(r);try{if(s)console.log("Development mode - Simulating delegation balance check");else{const e=await n.getDelegationTo(o,t),a=BigInt(e.toString()),i=BigInt(l.toString());if(a<i)throw new Error(`Insufficient delegated balance. You have ${w(e)} DLOOP delegated to this address but tried to undelegate ${r} DLOOP`)}}catch(e){if(console.error("Error checking delegated balance:",e),s)console.log("Development mode - Proceeding despite balance check error");else throw e}if(s){console.log("Development mode - Simulating undelegation transaction");const e={to:"0x05B366778566e93abfB8e4A9B794e4ad006446b4",from:o,contractAddress:null,transactionIndex:0,gasUsed:BigInt(2e5),logsBloom:"0x",blockHash:"0x"+"1".repeat(64),transactionHash:"0x"+"2".repeat(64),logs:[],blockNumber:1,confirmations:1,cumulativeGasUsed:BigInt(3e5),effectiveGasPrice:BigInt(2e9),type:2,status:1};return await new Promise(a=>setTimeout(a,1e3)),console.log("Development mode - Undelegation simulated successfully"),e}try{const e=await n.withdrawDelegation.estimateGas(t,l);console.log("Estimated gas for undelegation:",e.toString());const a=BigInt(Math.floor(Number(e)*1.2)),d=await(await n.withdrawDelegation(t,l,{gasLimit:a})).wait();return console.log("Undelegation successful:",d),d}catch(e){console.error("Error during undelegation transaction:",e);const i=await(await n.withdrawDelegation(t,l,{gasLimit:3e5})).wait();return console.log("Undelegation successful with manual gas:",i),i}}catch(o){throw console.error("Error undelegating tokens:",o),o}},async getUserDelegations(c,t){try{const r=h("DLoopToken",c),o=r.filters.TokensDelegated(t);return(await r.queryFilter(o)).map(g=>{const n=g;return n.args&&n.args.length>=3?{delegator:n.args[0],delegatee:n.args[1],amount:n.args[2].toString()}:(console.warn("Event with unexpected format:",g),{delegator:"",delegatee:"",amount:"0"})})}catch(r){throw console.error("Error fetching user delegations:",r),r}}};export{b as A,x as T};
