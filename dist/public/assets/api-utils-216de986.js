import{_ as c}from"./index-e1be7c10.js";const d=e=>{if(e.startsWith("/api/")){const t={"/api/protocol/proposals":"protocol-proposals","/api/protocol/metrics":"protocol-metrics","/api/leaderboard":"leaderboard","/api/leaderboard-delegations":"leaderboard-delegations","/api/ainodes":"ainodes","/api/ainodes-performance":"ainodes-performance","/api/ainodes-sentiments":"ainodes-sentiments"};return t[e]?`/.netlify/functions/${t[e]}`:`/.netlify/functions/${e.replace("/api/","").replace(/\//g,"-")}`}return e},f=async(e,t)=>{const r=d(e);console.log(`Fetching from: ${r}`);try{const{logApiRequest:a}=await c(()=>import("./debugMiddleware-4ccdb5bf.js"),[]),o=await a(r,t);if(!o.ok)throw new Error(`HTTP error ${o.status}: ${o.statusText}`);const n=o.headers.get("content-type");if(!n||!n.includes("application/json")){const s=await o.clone().text(),p=s.substring(0,500)+(s.length>500?"...":"");throw console.error(`Invalid content type: ${n}. Response preview:`,p),new Error(`Expected JSON response but got ${n}`)}const i=await o.json();return Array.isArray(i)?i.map(s=>({...s,__debug:{dataSource:"Real API",isMockData:!1,lastUpdated:new Date().toISOString(),apiEndpoint:e}})):{...i,__debug:{dataSource:"Real API",isMockData:!1,lastUpdated:new Date().toISOString(),apiEndpoint:e}}}catch(a){throw console.error(`Error fetching from ${r}:`,a),a}};export{f};
