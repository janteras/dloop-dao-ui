import{a as h}from"./contracts-444c63f0.js";import{H as w,k as D}from"./index-971aa118.js";var O=(e=>(e[e.Investment=0]="Investment",e[e.Divestment=1]="Divestment",e[e.ParameterChange=2]="ParameterChange",e))(O||{}),x=(e=>(e[e.Pending=0]="Pending",e[e.Active=1]="Active",e[e.Defeated=2]="Defeated",e[e.Succeeded=3]="Succeeded",e[e.Queued=4]="Queued",e[e.Executed=5]="Executed",e[e.Expired=6]="Expired",e))(x||{});const T=(e,t)=>{const r=["function balanceOf(address owner) view returns (uint256)","function decimals() view returns (uint8)","function symbol() view returns (string)","function transfer(address to, uint amount) returns (bool)","function allowance(address owner, address spender) view returns (uint256)","function approve(address spender, uint256 amount) returns (bool)"];return new D(e,r,t)},C={async getProposalDetails(e,t){try{const o=await h("AssetDAO",e).getProposal(t),n=o.description||"",i=c=>c?typeof c.toNumber=="function"?c.toNumber():Number(c):0,d=c=>{if(!c)return new Date;const p=i(c);return new Date(p*1e3)},u=c=>{if(!c)return"0";try{return w(c)}catch(p){return console.warn("Error formatting ether value:",p),String(c)}};return{id:i(o.id),type:o.proposalType,token:o.token,amount:o.amount,proposer:o.proposer,createdAt:d(o.createdAt),votingEnds:d(o.votingEnds),forVotes:u(o.forVotes),againstVotes:u(o.againstVotes),state:o.state,description:n}}catch(r){return console.error("Error fetching proposal details:",r),Promise.reject(this.handleContractError(r))}},async createInvestmentProposal(e,t,r,o){var n,i,d,u,c,p,m;try{const l=h("AssetDAO",e),a=await e.getAddress();console.log(`Creating investment proposal for ${t} with amount ${r}`),console.log("Connected wallet address:",a);let E=null;const y=async()=>{try{try{const s=T(t,e),f=await s.symbol(),A=await s.decimals();console.log(`Token: ${f} with ${A} decimals`)}catch(s){throw console.error("Error validating token:",s),new Error("Invalid token address - not a valid ERC20 token")}console.log(`Proposal details: Type=0, Token=${t}, Amount=${r}, Description=${o}`);try{const s=await l.propose(0,t,r,o);return console.log("Transaction sent:",s.hash),s}catch{console.log("Standard propose failed, trying with explicit gas limit...");const f=await l.propose(0,t,r,o,{gasLimit:8e5});return console.log("Transaction with increased gas limit sent:",f.hash),f}}catch(g){if(console.warn("Standard proposal approach failed:",g),console.log("Trying alternative proposal creation approach..."),typeof l.createProposal=="function"){const s=await l.createProposal(t,r,o,{gasLimit:8e5});return console.log("createProposal transaction sent:",s.hash),s}if(typeof l.proposeInvestment=="function"){const s=await l.proposeInvestment(t,r,o,{gasLimit:8e5});return console.log("proposeInvestment transaction sent:",s.hash),s}try{const s=await l.propose(t,r,o,0,{gasLimit:8e5});return console.log("Alternative order propose transaction sent:",s.hash),s}catch(s){console.warn("Alternative parameter order failed:",s)}throw new Error("All proposal creation approaches failed")}};try{E=await y()}catch(g){throw console.error("All proposal approaches failed:",g),new Error("Unable to create proposal: Contract implementation may be incompatible")}if(console.log("Waiting for transaction confirmation..."),!E)throw new Error("No transaction was created");const v=await E.wait();if(v)return console.log("Transaction confirmed in block:",v.blockNumber),v;throw new Error("Transaction failed to be mined")}catch(l){console.error("Error creating investment proposal:",l);const a=l;throw(n=a==null?void 0:a.reason)!=null&&n.includes("threshold")||(i=a==null?void 0:a.message)!=null&&i.includes("threshold")?new Error("You do not have enough voting power to create a proposal"):(d=a==null?void 0:a.reason)!=null&&d.includes("delay")||(u=a==null?void 0:a.message)!=null&&u.includes("cooldown")?new Error("Proposal cooldown period not passed. Please wait before creating another proposal"):(c=a==null?void 0:a.message)!=null&&c.includes("user rejected")?new Error("Transaction rejected by user"):(p=a==null?void 0:a.message)!=null&&p.includes("gas")?new Error("Transaction failed due to gas estimation. The contract may not support this proposal type."):(m=a==null?void 0:a.message)!=null&&m.includes("reverted")?new Error("Transaction reverted: The contract rejected your proposal. You may need higher voting power or the contract might not support this token."):this.handleContractError(l)}},async createDivestmentProposal(e,t,r,o){try{return await(await h("AssetDAO",e).propose(1,t,r,o)).wait()}catch(n){throw console.error("Error creating divestment proposal:",n),this.handleContractError(n)}},async createParameterChangeProposal(e,t,r,o){try{return await(await h("AssetDAO",e).propose(2,t,r,o)).wait()}catch(n){throw console.error("Error creating parameter change proposal:",n),this.handleContractError(n)}},async voteOnProposal(e,t,r){var o;try{const n=h("AssetDAO",e),i=await e.getAddress(),d=h("DLoopToken",e),u=await d.balanceOf(i),c=await d.getTotalDelegatedToAmount(i),p=BigInt(u)+BigInt(c);if(console.log(`Voting power check: Wallet=${w(u)}, Delegated=${w(c)}, Total=${w(p)}`),p<=BigInt(0))throw new Error("You need DLOOP tokens to vote. Either hold tokens in your wallet or have tokens delegated to you.");try{if(await n.hasVoted(t,i))throw new Error("You have already voted on this proposal")}catch(l){console.warn("Could not check if user has voted:",l)}try{await n.vote.estimateGas(t,r)}catch(l){const a=l.message||"";throw a.includes("already voted")?new Error("You have already voted on this proposal"):a.includes("voting period")?new Error("The voting period for this proposal has ended"):a.includes("not active")?new Error("This proposal is not currently active for voting"):a.includes("voting power")?new Error("You don't have enough voting power. Make sure you have DLOOP tokens in your wallet or delegated to you."):l}return await(await n.vote(t,r,{gasLimit:3e5})).wait()}catch(n){throw console.error("Error voting on proposal:",n),(o=n.message)!=null&&o.includes("execution reverted")?n.message.includes("already voted")?new Error("You have already voted on this proposal"):n.message.includes("voting period")?new Error("The voting period for this proposal has ended"):n.message.includes("delegated tokens")||n.message.includes("voting power")?new Error("You need DLOOP tokens to vote. You can use tokens in your wallet or have tokens delegated to you."):new Error("Transaction failed: You may not have enough DLOOP tokens or the voting period has ended."):this.handleContractError(n)}},async checkVotingStatus(e,t,r){try{const o=h("AssetDAO",e),n=await o.hasVoted(t,r);if(n){const i=await o.getVoterSupport(t,r),d=await o.getVoteWeight(t,r);return{hasVoted:n,support:i,weight:w(d)}}return{hasVoted:!1,support:!1,weight:"0"}}catch(o){throw console.error("Error checking voting status:",o),this.handleContractError(o)}},async executeProposal(e,t){try{const r=h("AssetDAO",e);if(!await r.canBeExecuted(t))throw new Error("Proposal cannot be executed yet");return await(await r.executeProposal(t)).wait()}catch(r){throw console.error("Error executing proposal:",r),this.handleContractError(r)}},async cancelProposal(e,t){try{return await(await h("AssetDAO",e).cancelProposal(t)).wait()}catch(r){throw console.error("Error canceling proposal:",r),this.handleContractError(r)}},async getAllProposals(e){try{const r=await h("AssetDAO",e).getProposalCount(),o=[];for(let n=1;n<=r;n++)try{const i=await this.getProposalDetails(e,n);o.push(i)}catch(i){console.error(`Error fetching proposal ${n}:`,i)}return o}catch(t){throw console.error("Error fetching all proposals:",t),this.handleContractError(t)}},handleContractError(e){const t=(e==null?void 0:e.message)||"";return t.includes("ZeroAddress")?new Error("Invalid address provided. Please check the token address."):t.includes("InvalidAmount")?new Error("Invalid amount specified. Amount must be greater than zero."):t.includes("Unauthorized")?new Error("You do not have permission to perform this action."):t.includes("ProposalNotFound")?new Error("This proposal does not exist."):t.includes("ProposalAlreadyExecuted")?new Error("This proposal has already been executed."):new Error(`Transaction error: ${t}`)}};export{C as AssetDAOService,x as ProposalState,O as ProposalType};
