{
  "version": 3,
  "sources": ["../../../../../../Users/apple/Downloads/dloop-dao-ui/dloop-ui/netlify/functions/config.js"],
  "sourceRoot": "/var/folders/k6/tfs_tx3s5fd5xc70ld8bcvlw0000gq/T/tmp-36172-qb4y2iAqObXM",
  "sourcesContent": ["exports.handler = async (event, context) => {\n  // Set CORS headers for all responses\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type',\n    'Access-Control-Allow-Methods': 'GET, OPTIONS'\n  };\n  \n  // Handle OPTIONS requests for CORS preflight\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 204,\n      headers,\n      body: ''\n    };\n  }\n  \n  if (event.httpMethod === 'GET') {\n    try {\n      // Use explicit API keys as in the original server\n      const infuraApiKey = \"ca485bd6567e4c5fb5693ee66a5885d8\"; // Infura Project ID\n      const walletConnectProjectId = \"6f23ad7f41333ccb23a5b2b6d330509a\"; // WalletConnect Project ID\n      \n      console.log(\"Sending API configuration to client:\", { \n        infuraApiKey: infuraApiKey.substring(0, 5) + \"...\", \n        walletConnectProjectId: walletConnectProjectId.substring(0, 5) + \"...\" \n      });\n      \n      // Send API keys to the client\n      return {\n        statusCode: 200,\n        headers: {\n          ...headers,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          infuraApiKey,\n          walletConnectProjectId\n        })\n      };\n    } catch (error) {\n      console.error('config.js error:', error);\n      return {\n        statusCode: 500,\n        headers: {\n          ...headers,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ \n          error: 'Failed to retrieve API configuration',\n          message: error.message || 'Unknown error'\n        })\n      };\n    }\n  }\n  \n  // Default response for unsupported methods\n  return {\n    statusCode: 405,\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ error: 'Method not allowed' })\n  };\n};\n"],
  "mappings": ";;;AAAA,QAAQ,UAAU,OAAO,OAAO,YAAY;AAE1C,QAAM,UAAU;AAAA,IACd,+BAA+B;AAAA,IAC/B,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,EAClC;AAGA,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM;AAAA,IACR;AAAA,EACF;AAEA,MAAI,MAAM,eAAe,OAAO;AAC9B,QAAI;AAEF,YAAM,eAAe;AACrB,YAAM,yBAAyB;AAE/B,cAAQ,IAAI,wCAAwC;AAAA,QAClD,cAAc,aAAa,UAAU,GAAG,CAAC,IAAI;AAAA,QAC7C,wBAAwB,uBAAuB,UAAU,GAAG,CAAC,IAAI;AAAA,MACnE,CAAC;AAGD,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,SAAS;AAAA,UACP,GAAG;AAAA,UACH,gBAAgB;AAAA,QAClB;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACnB;AAAA,UACA;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,oBAAoB,KAAK;AACvC,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,SAAS;AAAA,UACP,GAAG;AAAA,UACH,gBAAgB;AAAA,QAClB;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACnB,OAAO;AAAA,UACP,SAAS,MAAM,WAAW;AAAA,QAC5B,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAGA,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,SAAS;AAAA,MACP,GAAG;AAAA,MACH,gBAAgB;AAAA,IAClB;AAAA,IACA,MAAM,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC;AAAA,EACtD;AACF;",
  "names": []
}
