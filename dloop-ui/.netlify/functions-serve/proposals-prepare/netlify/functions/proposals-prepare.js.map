{
  "version": 3,
  "sources": ["../../../../../../Users/apple/Downloads/dloop-dao-ui/dloop-ui/netlify/functions/proposals-prepare.js"],
  "sourceRoot": "/var/folders/k6/tfs_tx3s5fd5xc70ld8bcvlw0000gq/T/tmp-36172-mj4C3AxfFak3",
  "sourcesContent": ["exports.handler = async (event, context) => {\n  // Set CORS headers for all responses\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type, x-wallet-address',\n    'Access-Control-Allow-Methods': 'POST, OPTIONS'\n  };\n  \n  // Handle OPTIONS requests for CORS preflight\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 204,\n      headers,\n      body: ''\n    };\n  }\n  \n  if (event.httpMethod === 'POST') {\n    try {\n      // In a real implementation, this would prepare the actual transaction data\n      // Mock response with the same hardcoded values as the Express server\n      const targets = [\"0xa87e662061237a121Ca2E83E77dA8251bc4B3529\"];\n      const values = [\"0\"];\n      const calldata = [\"0x\"];\n      \n      return {\n        statusCode: 200,\n        headers,\n        body: JSON.stringify({ targets, values, calldata })\n      };\n    } catch (error) {\n      return {\n        statusCode: 500,\n        headers,\n        body: JSON.stringify({ error: 'Failed to prepare proposal', message: error.message })\n      };\n    }\n  }\n  \n  // Default response for unsupported methods\n  return {\n    statusCode: 405,\n    headers,\n    body: JSON.stringify({ error: 'Method not allowed' })\n  };\n};\n"],
  "mappings": ";;;AAAA,QAAQ,UAAU,OAAO,OAAO,YAAY;AAE1C,QAAM,UAAU;AAAA,IACd,+BAA+B;AAAA,IAC/B,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,EAClC;AAGA,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM;AAAA,IACR;AAAA,EACF;AAEA,MAAI,MAAM,eAAe,QAAQ;AAC/B,QAAI;AAGF,YAAM,UAAU,CAAC,4CAA4C;AAC7D,YAAM,SAAS,CAAC,GAAG;AACnB,YAAM,WAAW,CAAC,IAAI;AAEtB,aAAO;AAAA,QACL,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,SAAS,QAAQ,SAAS,CAAC;AAAA,MACpD;AAAA,IACF,SAAS,OAAO;AACd,aAAO;AAAA,QACL,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,OAAO,8BAA8B,SAAS,MAAM,QAAQ,CAAC;AAAA,MACtF;AAAA,IACF;AAAA,EACF;AAGA,SAAO;AAAA,IACL,YAAY;AAAA,IACZ;AAAA,IACA,MAAM,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC;AAAA,EACtD;AACF;",
  "names": []
}
