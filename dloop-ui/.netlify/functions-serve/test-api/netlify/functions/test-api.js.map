{
  "version": 3,
  "sources": ["../../../../../../Users/apple/Downloads/dloop-dao-ui/dloop-ui/netlify/functions/test-api.js"],
  "sourceRoot": "/var/folders/k6/tfs_tx3s5fd5xc70ld8bcvlw0000gq/T/tmp-36172-2muo1AN31a3v",
  "sourcesContent": ["// Test script to verify our API endpoints are working\nexport const handler = async (event, context) => {\n  console.log('API Test function called - checking all endpoints');\n  \n  // Set CORS headers for the response\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type',\n    'Access-Control-Allow-Methods': 'GET, OPTIONS',\n    'Content-Type': 'application/json'\n  };\n  \n  try {\n    // Test all our API endpoints and collect results\n    const results = {};\n    \n    // Test leaderboard endpoint\n    try {\n      console.log('Testing leaderboard endpoint...');\n      const leaderboardUrl = 'http://localhost:9000/.netlify/functions/leaderboard';\n      const leaderboardResponse = await fetch(leaderboardUrl);\n      \n      if (!leaderboardResponse.ok) {\n        results.leaderboard = {\n          status: leaderboardResponse.status,\n          error: `Failed with status: ${leaderboardResponse.status}`\n        };\n      } else {\n        const data = await leaderboardResponse.json();\n        results.leaderboard = {\n          status: 'success',\n          dataStructure: {\n            hasParticipants: Boolean(data.participants && Array.isArray(data.participants)),\n            participantCount: data.participants ? data.participants.length : 0,\n            hasDelegations: Boolean(data.delegations && Array.isArray(data.delegations)),\n            delegationCount: data.delegations ? data.delegations.length : 0\n          }\n        };\n      }\n    } catch (error) {\n      results.leaderboard = {\n        status: 'error',\n        message: error.message\n      };\n    }\n    \n    // Test protocol-proposals endpoint\n    try {\n      console.log('Testing protocol-proposals endpoint...');\n      const proposalsUrl = 'http://localhost:9000/.netlify/functions/protocol-proposals';\n      const proposalsResponse = await fetch(proposalsUrl);\n      \n      if (!proposalsResponse.ok) {\n        results.protocolProposals = {\n          status: proposalsResponse.status,\n          error: `Failed with status: ${proposalsResponse.status}`\n        };\n      } else {\n        const data = await proposalsResponse.json();\n        results.protocolProposals = {\n          status: 'success',\n          dataStructure: {\n            isArray: Array.isArray(data),\n            itemCount: Array.isArray(data) ? data.length : 0,\n            firstItemFields: Array.isArray(data) && data.length > 0 ? Object.keys(data[0]) : []\n          }\n        };\n      }\n    } catch (error) {\n      results.protocolProposals = {\n        status: 'error',\n        message: error.message\n      };\n    }\n    \n    // Test protocol-metrics endpoint\n    try {\n      console.log('Testing protocol-metrics endpoint...');\n      const metricsUrl = 'http://localhost:9000/.netlify/functions/protocol-metrics';\n      const metricsResponse = await fetch(metricsUrl);\n      \n      if (!metricsResponse.ok) {\n        results.protocolMetrics = {\n          status: metricsResponse.status,\n          error: `Failed with status: ${metricsResponse.status}`\n        };\n      } else {\n        const data = await metricsResponse.json();\n        results.protocolMetrics = {\n          status: 'success',\n          dataStructure: {\n            isObject: typeof data === 'object' && data !== null && !Array.isArray(data),\n            fields: typeof data === 'object' && data !== null ? Object.keys(data).sort() : []\n          }\n        };\n      }\n    } catch (error) {\n      results.protocolMetrics = {\n        status: 'error',\n        message: error.message\n      };\n    }\n    \n    // Return all results\n    return {\n      statusCode: 200,\n      headers,\n      body: JSON.stringify({\n        message: 'API Test Results',\n        results,\n        timestamp: new Date().toISOString()\n      })\n    };\n  } catch (error) {\n    console.error('Error in test-api function:', error);\n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({\n        error: 'An error occurred during API testing',\n        message: error.message\n      })\n    };\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
